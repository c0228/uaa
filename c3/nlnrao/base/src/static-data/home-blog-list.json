{
    "agile":{
        "row1":[{
                "url":"tech/agile-methodology/what-is-L1-L2-L3-tier-system-of-remote-it-support",
                "title": "What is L1, L2, L3 Tier System of Remote IT Support?",
                "desc":"The L1, L2, and L3 tier system of remote IT support categorizes expertise levels. L1 provides basic assistance like password resets. L2 handles more complex issues, offering deeper technical solutions. L3 tackles specialized problems requiring advanced expertise. Each tier escalates to the next for unresolved issues, ensuring efficient problem resolution.",
                "descFix":305,
                "createdOn": "Jan 26, 2023",
                "minRead": "5 min read"
            }],
        "row2":[{
                "url":"tech/agile-methodology/what-are-architecture-design-principles-and-how-does-agile-methodology-aligns-with-it",
                "title": "What are Architecture Design principles? How does Agile Methodology aligns with it?",
                "desc":"Architecture design principles are fundamental guidelines for creating software systems, ensuring scalability, maintainability, and reliability. Agile aligns with these principles by promoting iterative development, continuous feedback, and adaptability, enabling architecture to evolve alongside changing requirements, thus ensuring alignment with business goals.",
                "descFix":260,
                "createdOn": "Jan 26, 2023",
                "minRead": "5 min read"
            }],
        "row3":[{ 
                "url":"tech/agile-methodology/what-is-the-role-of-domain-driven-design-ddd-in-agile-architecture-and-how-it-helps-in-defining-bounded-contexts-and-microservices",
                "title": "What is the role of Domain-driven Design (DDD) in Agile Architecture and how it helps in defining bounded contexts and microservices?",
                "desc":"Explores the role of Domain-Driven Design (DDD) in Agile Architecture, focusing on how it helps define bounded contexts and design microservices. It highlights DDD's impact on organizing complex systems and ensuring alignment between business needs and technical solutions.",
                "descFix":230,
                "createdOn": "Jan 26, 2023",
                "minRead": "5 min read"
            }]
    },
    "node":{
        "row1":[{ 
            "url":"tech/node-js/overview-of-node-js-and-v8-engine-how-they-works-together",
            "title": "Overview of NodeJS and V8 Engine. How they works together?",
            "desc":"Node.js is a JavaScript runtime built on the V8 JavaScript engine, which powers Google Chrome. V8 compiles JavaScript into machine code, enabling rapid execution. Node.js extends this functionality to the server-side, allowing developers to run JavaScript outside of the browser, facilitating scalable and efficient backend development. Together, Node.js and V8 enable developers to write server-side applications in JavaScript, utilizing a single language across the entire tech stack.",
            "descFix":275,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row2":[{ 
            "url":"tech/node-js/understanding-buffer-classes-in-node-js",
            "title": "Understanding Buffer Classes in NodeJS",
            "desc":"Buffer classes in Node.js are used to handle binary data directly. They provide a way to work with raw memory allocated outside the V8 heap. Buffer instances can be created in various ways: by providing the length of the buffer, an array of octets, or a string. They offer methods to manipulate and convert data, making them crucial for tasks like reading/writing files, handling network data, and cryptographic operations.",
            "descFix":305,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row3":[{
            "url":"tech/node-js/how-do-you-detect-and-prevent-memory-leaks-in-node-js-and-what-strategies-or-tools-do-you-use-for-garbage-collection-tuning-in-a-production-environment",
            "title":"How do you detect and prevent memory leaks in Node.js, and what strategies or tools do you use for garbage collection tuning in a production environment?",
            "desc":"Explores techniques for detecting and preventing memory leaks in Node.js, using tools like heap snapshots and monitoring. It also discusses strategies for tuning garbage collection in production environments for optimal performance.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }]
    },
    "dockub":{
        "row1":[{
            "url":"tech/docker-and-kubernetes/what-is-the-open-container-initiative-oci-and-how-do-runtimes-like-runc-containerd-and-cri-o-relate-to-docker-and-oci-specifications-why-choose-one-runtime-over-another",
            "title":"What is the Open Container Initiative (OCI), and how do runtimes like runc, containerd, and CRI-O relate to Docker and OCI specifications? Why choose one runtime over another?",
            "desc":"The Open Container Initiative (OCI) sets open standards for container formats and runtimes. Runtimes like runc, containerd, and CRI-O follow OCI specs. runc is a low-level runtime, containerd manages containers for Docker, and CRI-O is Kubernetes-native. Choice depends on use case.",
            "descFix":210,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/docker-and-kubernetes/how-can-kubernetes-be-used-in-edge-computing-and-what-challenges-arise-in-deploying-and-managing-it-discuss-solutions-like-kubeedge-and-microk8s",
            "title":"How can Kubernetes be used in edge computing, and what challenges arise in deploying and managing it (e.g., resource constraints, network connectivity)? Discuss solutions like KubeEdge and MicroK8s.",
            "desc":"Kubernetes enables edge computing via lightweight distros like MicroK8s and KubeEdge, extending workloads to edge nodes. Challenges include resource limits, unreliable networks, and security risks. Solutions: autoscaling, offline mode, efficient scheduling, and secure device management.",
            "descFix":140,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row2":[{
            "url":"tech/docker-and-kubernetes/what-are-advanced-techniques-for-optimizing-docker-image-size-beyond-multi-stage-builds-including-build-caching-squashing-layers-and-using-distroless-images-in-ci-cd-pipelines",
            "title":"What are advanced techniques for optimizing Docker image size, beyond multi-stage builds, including build caching, squashing layers, and using distroless images in CI/CD pipelines?",
            "desc":"Optimize Docker images with build caching, layer squashing, distroless images, and minimizing dependencies. Use .dockerignore, efficient RUN commands, and --no-install-recommends. CI/CD pipelines benefit from smaller, secure images, reducing attack surface and build time.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/docker-and-kubernetes/how-can-serverless-computing-be-applied-to-docker-containers-and-what-are-the-benefits-and-challenges-explore-technologies-like-firecracker-and-kata-containers-in-this-context",
            "title":"How can serverless computing be applied to Docker containers, and what are the benefits and challenges? Explore technologies like Firecracker and Kata Containers in this context.",
            "desc":"Serverless computing runs Docker containers on-demand via FaaS platforms like Knative and OpenFaaS. Firecracker and Kata Containers enhance security and performance with microVMs. Benefits: cost-efficiency, scalability. Challenges: cold starts, networking, and state management.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row3":[{
            "url":"tech/docker-and-kubernetes/how-can-Kubernetes-manage-stateful-applications-and-what-are-the-challenges-and-best-practices-for-running-stateful-workloads",
            "title":"How can Kubernetes manage stateful applications (e.g., databases, message queues), and what are the challenges and best practices for running stateful workloads?",
            "desc":"Kubernetes manages stateful apps via StatefulSets, PersistentVolumes, and Operators. Challenges include data consistency, scaling, and recovery. Best practices: use PVCs, Readiness Probes, and backup strategies.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/docker-and-kubernetes/how-can-kubernetes-support-serverless-computing-and-what-are-the-advantages-and-disadvantages-of-using-projects-like-knative-and-openfaas-for-serverless-workloads",
            "title":"How can Kubernetes support serverless computing, and what are the advantages and disadvantages of using projects like Knative and OpenFaaS for serverless workloads?",
            "desc":"Kubernetes supports serverless via Knative and OpenFaaS, enabling auto-scaling and event-driven execution. Advantages: portability, scalability, and cost efficiency. Disadvantages: complexity, cold starts, and overhead. Solutions: optimized scaling, caching, and lightweight runtimes.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }]
    },
    "kafka":{
        "row1":[{
            "url":"tech/kafka/how-does-kafka-architecture-compare-to-traditional-message-queues-in-scalability-fault-tolerance-and-message-ordering-and-when-would-you-choose-one-over-the-other",
            "title":"How does Kafka's architecture (topics, partitions, brokers) compare to traditional message queues (e.g., RabbitMQ, ActiveMQ) in scalability, fault tolerance, and message ordering, and when would you choose one over the other?",
            "desc":"Kafka uses topics, partitions, and brokers for high throughput, scalability, and fault tolerance. Traditional MQs (RabbitMQ, ActiveMQ) offer strong ordering, priority queues, and reliability. Choose Kafka for event streaming, large-scale data, and logs; MQs for request-response and low-latency tasks.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/kafka/what-are-the-challenges-and-opportunities-of-integrating-kafka-with-serverless-platforms-like-aws-lambda-or-google-cloud-functions-and-how-can-you-trigger-serverless-functions-based-on-kafka-messages",
            "title":"What are the challenges and opportunities of integrating Kafka with serverless platforms like AWS Lambda or Google Cloud Functions, and how can you trigger serverless functions based on Kafka messages?",
            "desc":"Integrating Kafka with serverless platforms faces challenges like event consumption, scalability, and at-least-once processing. Solutions: AWS Lambda with MSK, Google Cloud Functions with Pub/Sub. Opportunities: real-time processing, cost efficiency, and event-driven workflows.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row2":[{
            "url":"tech/kafka/zookeeper-is-a-critical-component-of-kafka-let-exploring-alternative-consensus-algorithms-that-could-potentially-improve-kafka-performance-fault-tolerance-or-scalability",
            "title":"Zookeeper is a critical component of Kafka. Let's exploring alternative consensus algorithms (e.g., Raft) that could potentially improve Kafka's performance, fault tolerance, or scalability?   ",
            "desc":"ZooKeeper ensures Kafka's coordination, but Raft-based alternatives like KRaft (Kafka Raft) simplify management, improve fault tolerance, and enhance scalability by removing external dependencies. Raft offers leader election and log replication, reducing overhead and streamlining operations.",
            "descFix":240,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/kafka/what-are-the-best-practices-for-encrypting-data-at-rest-and-in-transit-in-a-kafka-cluster-including-encryption-algorithms-key-management-systems-and-performance-implications",
            "title":"What are the best practices for encrypting data at rest and in transit in a Kafka cluster, including encryption algorithms, key management systems, and performance implications?",
            "desc":"Kafka secures data with TLS for encryption in transit and AES for data at rest. Use Kafka ACLs, SASL, and KMS for key management. Best practices: enable TLS, encrypt disks (AES-256), rotate keys, and balance security with performance to minimize latency overhead.",
            "descFix":240,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row3":[{
            "url":"tech/kafka/how-can-you-implement-auditing-and-logging-in-kafka-to-track-message-access-modifications-and-ensure-compliance-with-regulations-like-gdpr-hipaa-or-pci-dss",
            "title":"How can you implement auditing and logging in Kafka to track message access, modifications, and ensure compliance with regulations like GDPR, HIPAA, or PCI DSS?",
            "desc":"Implement Kafka auditing via Broker logs, ACLs, and log compaction. Use tools like Kafka Connect with SIEM, Schema Registry, and Audit Logs. Ensure GDPR/HIPAA compliance with encryption, access controls, and retention policies while balancing performance and storage costs.",
            "descFix":250,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/kafka/what-are-the-best-practices-for-hardening-a-kafka-cluster-against-security-threats-including-vulnerability-scanning-penetration-testing-and-security-patching",
            "title":"What are the best practices for hardening a Kafka cluster against security threats, including vulnerability scanning, penetration testing, and security patching?",
            "desc":"Harden Kafka with TLS, SASL, ACLs, and auditing. Conduct vulnerability scans, penetration tests, and apply security patches regularly. Restrict network access, use KMS for encryption, enable log monitoring, and follow least privilege principles for secure operations.",
            "descFix":240,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }]
    },
    "sysd":{
        "row1":[{
            "url":"tech/system-design/what-are-the-key-consensus-algorithms-and-their-implications-for-distributed-systems-when-should-you-choose-one-over-another-and-what-are-the-challenges-in-large-scale-deployments",
            "title":"What are the key consensus algorithms (e.g., Paxos, Raft) and their implications for distributed systems? When should you choose one over another, and what are the challenges in large-scale deployments?",
            "desc":"Key consensus algorithms include Paxos (robust but complex), Raft (simpler leader-based consensus), and PBFT (Byzantine fault tolerance). Paxos suits high-reliability systems, Raft is easier to implement, and PBFT is ideal for adversarial settings. Scalability is a challenge.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/system-design/what-are-the-key-differences-between-centralized-and-decentralized-data-management-in-distributed-systems-and-when-is-each-approach-more-suitable",
            "title":"What are the key differences between centralized and decentralized data management in distributed systems, and when is each approach (e.g., database vs. distributed ledger) more suitable?",
            "desc":"Centralized data management (e.g., databases) offers control, consistency, and efficiency but risks single points of failure. Decentralized systems (e.g., distributed ledgers) enhance security and fault tolerance but face scalability and performance trade-offs. Choose based on trust, scale, and control needs.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row2":[{
            "url":"tech/system-design/how-do-distributed-transactions-in-microservices-work-and-what-are-the-trade-offs-between-two-phase-commit-saga-pattern-consistency-and-performance-when-is-eventual-consistency-a-better-choice",
            "title":"How do distributed transactions in microservices work, and what are the trade-offs between two-phase commit, Saga pattern, consistency, and performance? When is eventual consistency a better choice?",
            "desc":"Distributed transactions use 2PC (strong consistency, slow, blocking) or Saga (event-driven, compensable, scalable). 2PC ensures ACID but hurts performance. Saga favors eventual consistency, improving resilience. Use eventual consistency when speed and availability outweigh strict ACID.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/system-design/what-is-polyglot-persistence-when-should-you-use-SQL-NoSQL-or-NewSQL-in-a-distributed-system-explore-its-impact-on-consistency-performance-and-complexity",
            "title":"What is polyglot persistence? When should you use SQL, NoSQL, or NewSQL in a distributed system? Explore its impact on consistency, performance, and complexity.",
            "desc":"Polyglot persistence uses multiple databases for different needs. Use SQL for ACID and structured data, NoSQL for scalability and flexibility, and NewSQL for strong consistency with scale. Balancing consistency, performance, and complexity is key in distributed systems.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row3":[{
            "url":"tech/system-design/how-can-quantum-inspired-distributed-algorithms-and-principles-like-superposition-and-entanglement-inspire-new-algorithms-for-distributed-consensus-communication-and-optimization",
            "title":"How can Quantum-Inspired Distributed Algorithms and Principles like superposition and entanglement inspire new algorithms for distributed consensus, communication, and optimization?",
            "desc":"Quantum-inspired superposition enables parallel state exploration, improving search and optimization in distributed systems. Entanglement can enhance secure communication and coordination. These principles inspire faster consensus (e.g., QKD-based Byzantine Agreement) and efficient resource allocation.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"tech/system-design/how-do-you-manage-data-versioning-and-schema-evolution-in-distributed-systems-while-ensuring-compatibility-between-services",
            "title":"How do you manage data versioning and schema evolution in distributed systems while ensuring compatibility between services?",
            "desc":"Use schema evolution tools (e.g., Avro, Protobuf) with backward/forward compatibility. Versioned APIs, feature flags, and rolling updates ensure smooth transitions. Event-driven architectures decouple services, reducing migration risks while maintaining consistency.",
            "descFix":225,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }]
    },
    "dsAlgo":{
        "row1":[{
            "url":"",
            "title":"What are cache-oblivious algorithms, and how do they optimize performance in modern architectures? Provide examples of related data structures and algorithms.",
            "desc":"Cache-oblivious algorithms optimize memory hierarchy use without hardware-specific tuning. They leverage recursive divide-and-conquer strategies, e.g., van Emde Boas trees (fast lookups) and cache-oblivious matrix multiplication (better locality), improving performance across architectures.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"",
            "title":"What are advanced geometric algorithms, and how are they applied in computer graphics, robotics, and Geographic Information Systems (GIS)?",
            "desc":"Advanced geometric algorithms (e.g., Voronoi diagrams, convex hulls, R-trees) optimize collision detection (graphics), path planning (robotics), and spatial indexing (GIS). They enhance efficiency, accuracy, and scalability in complex computational environments.",
            "descFix":230,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row2":[{
            "url":"",
            "title":"How do you test and verify algorithm and data structure correctness, especially in complex or concurrent scenarios?",
            "desc":"Use unit tests, property-based testing, and formal verification (e.g., TLA+). For concurrency, apply stress tests, race condition detection (e.g., ThreadSanitizer), and linearizability checks. Fuzz testing helps uncover edge cases, ensuring robustness.",
            "descFix":230,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"",
            "title":"How do you design algorithms and data structures for handling datasets larger than memory? Explore external memory, streaming, and distributed processing techniques.",
            "desc":"Use external memory algorithms (e.g., B-trees) for disk-efficient access, streaming algorithms (e.g., Count-Min Sketch) for real-time processing, and distributed frameworks (e.g., MapReduce, Spark) for parallel computation. Balance I/O, memory, and computation for scalability.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }],
        "row3":[{
            "url":"",
            "title":"How can self-tuning algorithms adjust parameters based on input data and hardware, simplifying development and improving performance?",
            "desc":"Self-tuning algorithms adapt parameters using feedback loops, ML models, or heuristics. Examples include adaptive sorting, auto-indexing (databases), and JIT compilation. They optimize performance across varying data and hardware, reducing manual tuning and improving efficiency.",
            "descFix":190,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        },{
            "url":"",
            "title":"What is the Byzantine Generals' Problem, and how do Byzantine Fault Tolerance (BFT) algorithms like Practical Byzantine Fault Tolerance (PBFT) and Tendermint address it in blockchain? What are their scalability and complexity limitations?",
            "desc":"The Byzantine Generals' Problem models trust issues in faulty networks. PBFT ensures consensus with replica voting, but it's O(n²) costly. Tendermint streamlines BFT for blockchain, reducing overhead but limiting decentralization. Scalability remains a challenge.",
            "descFix":150,
            "createdOn": "Jan 26, 2023",
            "minRead": "5 min read"
        }]
    }
}